// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreApi.Service;

namespace StoreApi.Service.Migrations
{
    [DbContext(typeof(RDTContext))]
    partial class RDTContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("StoreApi.Service.Models.Article", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("ArticleAuthorEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ArticleTopicEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EditeddDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.HasIndex("ArticleAuthorEntityId");

                    b.HasIndex("ArticleTopicEntityId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("StoreApi.Service.Models.Author", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            Email = "chedro.cardenas@yahoo.com",
                            Name = "Chedro Cardenas",
                            Password = "12345"
                        },
                        new
                        {
                            EntityId = 2L,
                            Email = "elliott.lockwood@aol.com",
                            Name = "Elliott Lockwood",
                            Password = "12345"
                        },
                        new
                        {
                            EntityId = 3L,
                            Email = "joshwin.greene@gmail.com",
                            Name = "Joshwin Greene",
                            Password = "12345"
                        });
                });

            modelBuilder.Entity("StoreApi.Service.Models.Reader", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("StoreApi.Service.Models.Topic", b =>
                {
                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReaderEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityId");

                    b.HasIndex("ReaderEntityId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            Name = "Startups"
                        },
                        new
                        {
                            EntityId = 2L,
                            Name = "DevOps"
                        },
                        new
                        {
                            EntityId = 3L,
                            Name = "Testing"
                        },
                        new
                        {
                            EntityId = 4L,
                            Name = "Big Data"
                        },
                        new
                        {
                            EntityId = 5L,
                            Name = "Machine Learning"
                        },
                        new
                        {
                            EntityId = 6L,
                            Name = "FAANG"
                        },
                        new
                        {
                            EntityId = 7L,
                            Name = "Languages"
                        },
                        new
                        {
                            EntityId = 8L,
                            Name = "Hacker News"
                        },
                        new
                        {
                            EntityId = 9L,
                            Name = "Databases"
                        });
                });

            modelBuilder.Entity("StoreApi.Service.Models.Article", b =>
                {
                    b.HasOne("StoreApi.Service.Models.Author", "ArticleAuthor")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleAuthorEntityId");

                    b.HasOne("StoreApi.Service.Models.Topic", "ArticleTopic")
                        .WithMany()
                        .HasForeignKey("ArticleTopicEntityId");

                    b.Navigation("ArticleAuthor");

                    b.Navigation("ArticleTopic");
                });

            modelBuilder.Entity("StoreApi.Service.Models.Topic", b =>
                {
                    b.HasOne("StoreApi.Service.Models.Reader", null)
                        .WithMany("PreferredTopics")
                        .HasForeignKey("ReaderEntityId");
                });

            modelBuilder.Entity("StoreApi.Service.Models.Author", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("StoreApi.Service.Models.Reader", b =>
                {
                    b.Navigation("PreferredTopics");
                });
#pragma warning restore 612, 618
        }
    }
}
